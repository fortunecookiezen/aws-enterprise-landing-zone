---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Tenant subnet intrastructure CloudFormation template"
Parameters:
  vpcid:
    Description: VPC Id
    Type: AWS::EC2::VPC::Id
  appacidr:
    Type: String
    Description: CIDR to use for application subnet a.
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
    Default: 10.15.4.0/24
  appbcidr:
    Type: String
    Description: CIDR to use for application subnet b.
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
    Default: 10.15.5.0/24
  privateacidr:
    Type: String
    Description: CIDR to use for private subnet a.
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
    Default: 10.15.6.0/24
  privatebcidr:
    Type: String
    Description: CIDR to use for private subnet b.
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
    Default: 10.15.7.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
        - vpcid
        - appacidr
        - appbcidr
        - privateacidr
        - privatebcidr
    ParameterLabels:
      vpcid:
        default: "VPC to create subnets in"

Resources:
  SubnetAppA: # App Subnet for App Env in AZ - A
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref appacidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "app-a"

  SubnetAppB: # Private Subnet for App Env in AZ - B 
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref appbcidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "app-b"

  RouteTableAppA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "app-a-rt"

  RouteTableAppB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "app-b-rt"

  SubnetRouteTableAssociateAppA: # Associates the subnet with a route table - Needed for Transit Gateway
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableAppA
      SubnetId: !Ref SubnetAppA 

  SubnetRouteTableAssociateAppB: # Associates the subnet with a route table - Needed for Transit Gateway
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableAppB
      SubnetId: !Ref SubnetAppB 

  SubnetPrivateA: # Private Subnet for App Env in AZ - A
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref privateacidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "private-a"

  SubnetPrivateB: # Private Subnet for App Env in AZ - B 
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref privatebcidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "private-b"

  RouteTablePrivateA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "private-a-rt"

  RouteTablePrivateB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpcid
      Tags:
        -
          Key: "Name"
          Value: "private-b-rt"

  SubnetRouteTableAssociatePrivateA: # Associates the subnet with a route table - Needed for Transit Gateway
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      SubnetId: !Ref SubnetPrivateA 

  SubnetRouteTableAssociatePrivateB: # Associates the subnet with a route table - Needed for Transit Gateway
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      SubnetId: !Ref SubnetPrivateB 

Outputs:
  appsubneta:
    Description: "ID of App Subnet - A - Load Balancers and API gateways go here"
    Value: !Ref SubnetAppA
    Export: # added to export
      Name: appsubneta
  appsubnetb:
    Description: "ID of App Subnet - B - Load Balancers and API gateways go here"
    Value: !Ref SubnetAppB
    Export: # added to export
      Name: appsubnetb
  privatesubneta:
    Description: ID of Private Subnet - A
    Value: !Ref SubnetPrivateA
    Export: # added to export
      Name: privatesubneta
  privatesubnetb:
    Description: ID of Private Subnet - B
    Value: !Ref SubnetPrivateB
    Export: # added to export
      Name: privatesubnetb
